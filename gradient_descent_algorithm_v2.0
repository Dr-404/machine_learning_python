{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "996b84d0",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "incomplete input (1237683477.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn [122], line 2\u001b[0;36m\u001b[0m\n\u001b[0;31m    \"\"\"\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"
     ]
    }
   ],
   "source": [
    "#!/usr/env/python python3\n",
    "\"\"\"\n",
    "Module   :   Gradient Descent Algorithm\n",
    "Version  :   2.0\n",
    "Author   :   Htun Aung Kyaw\n",
    "Date     :   Thu Mar 30 12:46:39 PM +0630 2023\n",
    "\n",
    "This module implements the gradient descent algorithm for optimization problems.\n",
    "\n",
    "Functions:\n",
    "- gradient_descent(f, df, x_init, learning_rate=0.01, max_iter=1000, eps=1e-6): implements the gradient descent algorithm\n",
    "\n",
    "The paramter of gradient descent algorithm are \n",
    "- f(x)\n",
    "- df(x)/dx or gradient or derivative of f(x)\n",
    "- starting_point (old_x)\n",
    "- step_size or learning rate\n",
    "- stopping criteria (epsilon)\n",
    "- number of iteration \n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b15d3d5d",
   "metadata": {},
   "source": [
    "## Importing Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "3c9bf891",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86076943",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "aecb8068",
   "metadata": {},
   "source": [
    "## Pseudo code from ChatGpt\n",
    "``` python\n",
    "function gradient_descent(f, df, x_init, learning_rate=0.01, max_iter=1000, eps=1e-6):\n",
    "    # Initialize x with an initial guess\n",
    "    x = x_init\n",
    "    \n",
    "    # Iterate until convergence or until maximum number of iterations is reached\n",
    "    for i in range(max_iter):\n",
    "        # Compute the gradient of the objective function at x\n",
    "        grad = df(x)\n",
    "        \n",
    "        # Update x using the gradient and the learning rate\n",
    "        x_new = x - learning_rate * grad\n",
    "        \n",
    "        # Check if the algorithm has converged\n",
    "        if abs(f(x_new) - f(x)) < eps:\n",
    "            break\n",
    "        \n",
    "        # Update x for the next iteration\n",
    "        x = x_new\n",
    "    \n",
    "    # Return the final estimate of x\n",
    "    return x\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7dddf42",
   "metadata": {},
   "source": [
    "# ------------------------Start of Gradient Decent Algorithm----------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78c155ba",
   "metadata": {},
   "source": [
    "## Define variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "d742738c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "function = lambda x: x**2\n",
    "derivative = lambda x : 2*x\n",
    "start_point = 4\n",
    "step_size = 0.1\n",
    "eps = 0\n",
    "max_iter = 10"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffa6d03a",
   "metadata": {},
   "source": [
    "## Define Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "0cf4c614",
   "metadata": {},
   "outputs": [],
   "source": [
    "def f(x):\n",
    "    y = function(x)\n",
    "    #y = (2400*x)-(2*pow(x,2))\n",
    "    return y\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6ed47e6",
   "metadata": {},
   "source": [
    "## Derivative fo function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "d5524ea9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def df(x):\n",
    "    y_prime = derivative(x)\n",
    "    #y_prime = 2400-4*x\n",
    "    return y_prime"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af9ebf35",
   "metadata": {},
   "source": [
    "## Theory Background\n",
    "![Gradient_decent_algorithm](https://github.com/Dr-404/machine_learning_python/blob/main/photos/GD_Algorithm.png?raw=true)\n",
    "![Gradient_decent_algorithm_2](https://github.com/Dr-404/machine_learning_python/blob/main/photos/GD_Algorithm_2.png?raw=true)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "beb38c1e",
   "metadata": {},
   "source": [
    "## Gradient Decent Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "6fc8e90b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Y is : [16]\n",
      "The minium is at :  0.4294967296000001\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def gradient_descent(f, df, start_point , step_size, eps, max_iter):\n",
    "    x = [start_point] # Making List of starting position and next new poistion\n",
    "    y = [f(start_point)]\n",
    "    print(\"Y is :\",y)\n",
    "    iter = 0\n",
    "    \n",
    "    while (iter < max_iter):\n",
    "        # Calculate the gradient or derivative of function and update x\n",
    "        grad = df(x[-1])\n",
    "        \n",
    "        #  x_new = old x - stepsize*dy/dx \"-\" becuase of finding minium\n",
    "        x_new = x[-1] - step_size*grad\n",
    "        \n",
    "        # Check convergence criterion (stopping Criteria)\n",
    "        # Difference between x-new and old is less than esp(stopping criteria) ==> stop iteration\n",
    "        if abs(f(x_new) - f(x[-1])) < eps:\n",
    "            break\n",
    "        \n",
    "        # Update x and y list\n",
    "        x.append(x_new)\n",
    "        y.append(f(x_new))\n",
    "        \n",
    "        # Increment iteration counter\n",
    "        iter += 1\n",
    "    \n",
    "    return x, y\n",
    "\n",
    "# # Set the parameters\n",
    "# start_point = 4\n",
    "# step_size = 0.1\n",
    "# eps = 0\n",
    "# max_iter = 10\n",
    "\n",
    "# Call the gradient descent function with specified parameters\n",
    "x, y = gradient_descent(f, df, start_point , step_size, eps, max_iter)\n",
    "\n",
    "# Plot the function and the gradient descent path\n",
    "t = np.arange(-100, 80, 0.1)\n",
    "plt.plot(t, f(t), 'b', label='f(x)')\n",
    "plt.plot(x, y, 'ro-', label='gradient descent')\n",
    "plt.xlabel('x')\n",
    "\n",
    "plt.ylabel('y')\n",
    "plt.title('Gradient Descent')\n",
    "plt.legend()\n",
    "print(\"The minium is at : \",x[-1])\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "9cdce693",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2c0889f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1488450",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6761d5c7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
